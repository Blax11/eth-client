// Code generated by MockGen. DO NOT EDIT.
// Source: eth.go

// Package rpc is a generated GoMock package.
package rpc

import (
	context "context"
	common "github.com/ethereum/go-ethereum/common"
	hexutil "github.com/ethereum/go-ethereum/common/hexutil"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEth is a mock of Eth interface
type MockEth struct {
	ctrl     *gomock.Controller
	recorder *MockEthMockRecorder
}

// MockEthMockRecorder is the mock recorder for MockEth
type MockEthMockRecorder struct {
	mock *MockEth
}

// NewMockEth creates a new mock instance
func NewMockEth(ctrl *gomock.Controller) *MockEth {
	mock := &MockEth{ctrl: ctrl}
	mock.recorder = &MockEthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEth) EXPECT() *MockEthMockRecorder {
	return m.recorder
}

// GetBlockTransactionCountByNumber mocks base method
func (m *MockEth) GetBlockTransactionCountByNumber(ctx context.Context, blockNr string) (*hexutil.Uint, error) {
	ret := m.ctrl.Call(m, "GetBlockTransactionCountByNumber", ctx, blockNr)
	ret0, _ := ret[0].(*hexutil.Uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTransactionCountByNumber indicates an expected call of GetBlockTransactionCountByNumber
func (mr *MockEthMockRecorder) GetBlockTransactionCountByNumber(ctx, blockNr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransactionCountByNumber", reflect.TypeOf((*MockEth)(nil).GetBlockTransactionCountByNumber), ctx, blockNr)
}

// GetBlockTransactionCountByHash mocks base method
func (m *MockEth) GetBlockTransactionCountByHash(ctx context.Context, blockHash common.Hash) (*hexutil.Uint, error) {
	ret := m.ctrl.Call(m, "GetBlockTransactionCountByHash", ctx, blockHash)
	ret0, _ := ret[0].(*hexutil.Uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTransactionCountByHash indicates an expected call of GetBlockTransactionCountByHash
func (mr *MockEthMockRecorder) GetBlockTransactionCountByHash(ctx, blockHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransactionCountByHash", reflect.TypeOf((*MockEth)(nil).GetBlockTransactionCountByHash), ctx, blockHash)
}

// GetTransactionByBlockNumberAndIndex mocks base method
func (m *MockEth) GetTransactionByBlockNumberAndIndex(ctx context.Context, blockNr string, index hexutil.Uint) (*RPCTransaction, error) {
	ret := m.ctrl.Call(m, "GetTransactionByBlockNumberAndIndex", ctx, blockNr, index)
	ret0, _ := ret[0].(*RPCTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByBlockNumberAndIndex indicates an expected call of GetTransactionByBlockNumberAndIndex
func (mr *MockEthMockRecorder) GetTransactionByBlockNumberAndIndex(ctx, blockNr, index interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByBlockNumberAndIndex", reflect.TypeOf((*MockEth)(nil).GetTransactionByBlockNumberAndIndex), ctx, blockNr, index)
}

// GetTransactionByBlockHashAndIndex mocks base method
func (m *MockEth) GetTransactionByBlockHashAndIndex(ctx context.Context, blockHash common.Hash, index hexutil.Uint) (*RPCTransaction, error) {
	ret := m.ctrl.Call(m, "GetTransactionByBlockHashAndIndex", ctx, blockHash, index)
	ret0, _ := ret[0].(*RPCTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByBlockHashAndIndex indicates an expected call of GetTransactionByBlockHashAndIndex
func (mr *MockEthMockRecorder) GetTransactionByBlockHashAndIndex(ctx, blockHash, index interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByBlockHashAndIndex", reflect.TypeOf((*MockEth)(nil).GetTransactionByBlockHashAndIndex), ctx, blockHash, index)
}

// GetRawTransactionByBlockNumberAndIndex mocks base method
func (m *MockEth) GetRawTransactionByBlockNumberAndIndex(ctx context.Context, blockNr string, index hexutil.Uint) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "GetRawTransactionByBlockNumberAndIndex", ctx, blockNr, index)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransactionByBlockNumberAndIndex indicates an expected call of GetRawTransactionByBlockNumberAndIndex
func (mr *MockEthMockRecorder) GetRawTransactionByBlockNumberAndIndex(ctx, blockNr, index interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransactionByBlockNumberAndIndex", reflect.TypeOf((*MockEth)(nil).GetRawTransactionByBlockNumberAndIndex), ctx, blockNr, index)
}

// GetRawTransactionByBlockHashAndIndex mocks base method
func (m *MockEth) GetRawTransactionByBlockHashAndIndex(ctx context.Context, blockHash common.Hash, index hexutil.Uint) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "GetRawTransactionByBlockHashAndIndex", ctx, blockHash, index)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransactionByBlockHashAndIndex indicates an expected call of GetRawTransactionByBlockHashAndIndex
func (mr *MockEthMockRecorder) GetRawTransactionByBlockHashAndIndex(ctx, blockHash, index interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransactionByBlockHashAndIndex", reflect.TypeOf((*MockEth)(nil).GetRawTransactionByBlockHashAndIndex), ctx, blockHash, index)
}

// GetTransactionCount mocks base method
func (m *MockEth) GetTransactionCount(ctx context.Context, address common.Address, blockNr string) (*hexutil.Uint64, error) {
	ret := m.ctrl.Call(m, "GetTransactionCount", ctx, address, blockNr)
	ret0, _ := ret[0].(*hexutil.Uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionCount indicates an expected call of GetTransactionCount
func (mr *MockEthMockRecorder) GetTransactionCount(ctx, address, blockNr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionCount", reflect.TypeOf((*MockEth)(nil).GetTransactionCount), ctx, address, blockNr)
}

// GetTransactionByHash mocks base method
func (m *MockEth) GetTransactionByHash(ctx context.Context, hash common.Hash) (*RPCTransaction, error) {
	ret := m.ctrl.Call(m, "GetTransactionByHash", ctx, hash)
	ret0, _ := ret[0].(*RPCTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByHash indicates an expected call of GetTransactionByHash
func (mr *MockEthMockRecorder) GetTransactionByHash(ctx, hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByHash", reflect.TypeOf((*MockEth)(nil).GetTransactionByHash), ctx, hash)
}

// GetRawTransactionByHash mocks base method
func (m *MockEth) GetRawTransactionByHash(ctx context.Context, hash common.Hash) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "GetRawTransactionByHash", ctx, hash)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransactionByHash indicates an expected call of GetRawTransactionByHash
func (mr *MockEthMockRecorder) GetRawTransactionByHash(ctx, hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransactionByHash", reflect.TypeOf((*MockEth)(nil).GetRawTransactionByHash), ctx, hash)
}

// GetTransactionReceipt mocks base method
func (m *MockEth) GetTransactionReceipt(ctx context.Context, hash common.Hash) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetTransactionReceipt", ctx, hash)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionReceipt indicates an expected call of GetTransactionReceipt
func (mr *MockEthMockRecorder) GetTransactionReceipt(ctx, hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionReceipt", reflect.TypeOf((*MockEth)(nil).GetTransactionReceipt), ctx, hash)
}

// SendTransaction mocks base method
func (m *MockEth) SendTransaction(ctx context.Context, args SendTxArgs) (common.Hash, error) {
	ret := m.ctrl.Call(m, "SendTransaction", ctx, args)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransaction indicates an expected call of SendTransaction
func (mr *MockEthMockRecorder) SendTransaction(ctx, args interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockEth)(nil).SendTransaction), ctx, args)
}

// SendRawTransaction mocks base method
func (m *MockEth) SendRawTransaction(ctx context.Context, encodedTx hexutil.Bytes) (common.Hash, error) {
	ret := m.ctrl.Call(m, "SendRawTransaction", ctx, encodedTx)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawTransaction indicates an expected call of SendRawTransaction
func (mr *MockEthMockRecorder) SendRawTransaction(ctx, encodedTx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawTransaction", reflect.TypeOf((*MockEth)(nil).SendRawTransaction), ctx, encodedTx)
}

// Sign mocks base method
func (m *MockEth) Sign(ctx context.Context, addr common.Address, data hexutil.Bytes) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "Sign", ctx, addr, data)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign
func (mr *MockEthMockRecorder) Sign(ctx, addr, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockEth)(nil).Sign), ctx, addr, data)
}

// SignTransaction mocks base method
func (m *MockEth) SignTransaction(ctx context.Context, args SendTxArgs) (*SignTransactionResult, error) {
	ret := m.ctrl.Call(m, "SignTransaction", ctx, args)
	ret0, _ := ret[0].(*SignTransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignTransaction indicates an expected call of SignTransaction
func (mr *MockEthMockRecorder) SignTransaction(ctx, args interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTransaction", reflect.TypeOf((*MockEth)(nil).SignTransaction), ctx, args)
}

// PendingTransactions mocks base method
func (m *MockEth) PendingTransactions(ctx context.Context) ([]*RPCTransaction, error) {
	ret := m.ctrl.Call(m, "PendingTransactions", ctx)
	ret0, _ := ret[0].([]*RPCTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingTransactions indicates an expected call of PendingTransactions
func (mr *MockEthMockRecorder) PendingTransactions(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingTransactions", reflect.TypeOf((*MockEth)(nil).PendingTransactions), ctx)
}

// Resend mocks base method
func (m *MockEth) Resend(ctx context.Context, sendArgs SendTxArgs, gasPrice, gasLimit hexutil.Big) (common.Hash, error) {
	ret := m.ctrl.Call(m, "Resend", ctx, sendArgs, gasPrice, gasLimit)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resend indicates an expected call of Resend
func (mr *MockEthMockRecorder) Resend(ctx, sendArgs, gasPrice, gasLimit interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resend", reflect.TypeOf((*MockEth)(nil).Resend), ctx, sendArgs, gasPrice, gasLimit)
}

// MockPublicTransactionPool is a mock of PublicTransactionPool interface
type MockPublicTransactionPool struct {
	ctrl     *gomock.Controller
	recorder *MockPublicTransactionPoolMockRecorder
}

// MockPublicTransactionPoolMockRecorder is the mock recorder for MockPublicTransactionPool
type MockPublicTransactionPoolMockRecorder struct {
	mock *MockPublicTransactionPool
}

// NewMockPublicTransactionPool creates a new mock instance
func NewMockPublicTransactionPool(ctrl *gomock.Controller) *MockPublicTransactionPool {
	mock := &MockPublicTransactionPool{ctrl: ctrl}
	mock.recorder = &MockPublicTransactionPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublicTransactionPool) EXPECT() *MockPublicTransactionPoolMockRecorder {
	return m.recorder
}

// GetBlockTransactionCountByNumber mocks base method
func (m *MockPublicTransactionPool) GetBlockTransactionCountByNumber(ctx context.Context, blockNr string) (*hexutil.Uint, error) {
	ret := m.ctrl.Call(m, "GetBlockTransactionCountByNumber", ctx, blockNr)
	ret0, _ := ret[0].(*hexutil.Uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTransactionCountByNumber indicates an expected call of GetBlockTransactionCountByNumber
func (mr *MockPublicTransactionPoolMockRecorder) GetBlockTransactionCountByNumber(ctx, blockNr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransactionCountByNumber", reflect.TypeOf((*MockPublicTransactionPool)(nil).GetBlockTransactionCountByNumber), ctx, blockNr)
}

// GetBlockTransactionCountByHash mocks base method
func (m *MockPublicTransactionPool) GetBlockTransactionCountByHash(ctx context.Context, blockHash common.Hash) (*hexutil.Uint, error) {
	ret := m.ctrl.Call(m, "GetBlockTransactionCountByHash", ctx, blockHash)
	ret0, _ := ret[0].(*hexutil.Uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTransactionCountByHash indicates an expected call of GetBlockTransactionCountByHash
func (mr *MockPublicTransactionPoolMockRecorder) GetBlockTransactionCountByHash(ctx, blockHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransactionCountByHash", reflect.TypeOf((*MockPublicTransactionPool)(nil).GetBlockTransactionCountByHash), ctx, blockHash)
}

// GetTransactionByBlockNumberAndIndex mocks base method
func (m *MockPublicTransactionPool) GetTransactionByBlockNumberAndIndex(ctx context.Context, blockNr string, index hexutil.Uint) (*RPCTransaction, error) {
	ret := m.ctrl.Call(m, "GetTransactionByBlockNumberAndIndex", ctx, blockNr, index)
	ret0, _ := ret[0].(*RPCTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByBlockNumberAndIndex indicates an expected call of GetTransactionByBlockNumberAndIndex
func (mr *MockPublicTransactionPoolMockRecorder) GetTransactionByBlockNumberAndIndex(ctx, blockNr, index interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByBlockNumberAndIndex", reflect.TypeOf((*MockPublicTransactionPool)(nil).GetTransactionByBlockNumberAndIndex), ctx, blockNr, index)
}

// GetTransactionByBlockHashAndIndex mocks base method
func (m *MockPublicTransactionPool) GetTransactionByBlockHashAndIndex(ctx context.Context, blockHash common.Hash, index hexutil.Uint) (*RPCTransaction, error) {
	ret := m.ctrl.Call(m, "GetTransactionByBlockHashAndIndex", ctx, blockHash, index)
	ret0, _ := ret[0].(*RPCTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByBlockHashAndIndex indicates an expected call of GetTransactionByBlockHashAndIndex
func (mr *MockPublicTransactionPoolMockRecorder) GetTransactionByBlockHashAndIndex(ctx, blockHash, index interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByBlockHashAndIndex", reflect.TypeOf((*MockPublicTransactionPool)(nil).GetTransactionByBlockHashAndIndex), ctx, blockHash, index)
}

// GetRawTransactionByBlockNumberAndIndex mocks base method
func (m *MockPublicTransactionPool) GetRawTransactionByBlockNumberAndIndex(ctx context.Context, blockNr string, index hexutil.Uint) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "GetRawTransactionByBlockNumberAndIndex", ctx, blockNr, index)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransactionByBlockNumberAndIndex indicates an expected call of GetRawTransactionByBlockNumberAndIndex
func (mr *MockPublicTransactionPoolMockRecorder) GetRawTransactionByBlockNumberAndIndex(ctx, blockNr, index interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransactionByBlockNumberAndIndex", reflect.TypeOf((*MockPublicTransactionPool)(nil).GetRawTransactionByBlockNumberAndIndex), ctx, blockNr, index)
}

// GetRawTransactionByBlockHashAndIndex mocks base method
func (m *MockPublicTransactionPool) GetRawTransactionByBlockHashAndIndex(ctx context.Context, blockHash common.Hash, index hexutil.Uint) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "GetRawTransactionByBlockHashAndIndex", ctx, blockHash, index)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransactionByBlockHashAndIndex indicates an expected call of GetRawTransactionByBlockHashAndIndex
func (mr *MockPublicTransactionPoolMockRecorder) GetRawTransactionByBlockHashAndIndex(ctx, blockHash, index interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransactionByBlockHashAndIndex", reflect.TypeOf((*MockPublicTransactionPool)(nil).GetRawTransactionByBlockHashAndIndex), ctx, blockHash, index)
}

// GetTransactionCount mocks base method
func (m *MockPublicTransactionPool) GetTransactionCount(ctx context.Context, address common.Address, blockNr string) (*hexutil.Uint64, error) {
	ret := m.ctrl.Call(m, "GetTransactionCount", ctx, address, blockNr)
	ret0, _ := ret[0].(*hexutil.Uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionCount indicates an expected call of GetTransactionCount
func (mr *MockPublicTransactionPoolMockRecorder) GetTransactionCount(ctx, address, blockNr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionCount", reflect.TypeOf((*MockPublicTransactionPool)(nil).GetTransactionCount), ctx, address, blockNr)
}

// GetTransactionByHash mocks base method
func (m *MockPublicTransactionPool) GetTransactionByHash(ctx context.Context, hash common.Hash) (*RPCTransaction, error) {
	ret := m.ctrl.Call(m, "GetTransactionByHash", ctx, hash)
	ret0, _ := ret[0].(*RPCTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByHash indicates an expected call of GetTransactionByHash
func (mr *MockPublicTransactionPoolMockRecorder) GetTransactionByHash(ctx, hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByHash", reflect.TypeOf((*MockPublicTransactionPool)(nil).GetTransactionByHash), ctx, hash)
}

// GetRawTransactionByHash mocks base method
func (m *MockPublicTransactionPool) GetRawTransactionByHash(ctx context.Context, hash common.Hash) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "GetRawTransactionByHash", ctx, hash)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransactionByHash indicates an expected call of GetRawTransactionByHash
func (mr *MockPublicTransactionPoolMockRecorder) GetRawTransactionByHash(ctx, hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransactionByHash", reflect.TypeOf((*MockPublicTransactionPool)(nil).GetRawTransactionByHash), ctx, hash)
}

// GetTransactionReceipt mocks base method
func (m *MockPublicTransactionPool) GetTransactionReceipt(ctx context.Context, hash common.Hash) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetTransactionReceipt", ctx, hash)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionReceipt indicates an expected call of GetTransactionReceipt
func (mr *MockPublicTransactionPoolMockRecorder) GetTransactionReceipt(ctx, hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionReceipt", reflect.TypeOf((*MockPublicTransactionPool)(nil).GetTransactionReceipt), ctx, hash)
}

// SendTransaction mocks base method
func (m *MockPublicTransactionPool) SendTransaction(ctx context.Context, args SendTxArgs) (common.Hash, error) {
	ret := m.ctrl.Call(m, "SendTransaction", ctx, args)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransaction indicates an expected call of SendTransaction
func (mr *MockPublicTransactionPoolMockRecorder) SendTransaction(ctx, args interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockPublicTransactionPool)(nil).SendTransaction), ctx, args)
}

// SendRawTransaction mocks base method
func (m *MockPublicTransactionPool) SendRawTransaction(ctx context.Context, encodedTx hexutil.Bytes) (common.Hash, error) {
	ret := m.ctrl.Call(m, "SendRawTransaction", ctx, encodedTx)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawTransaction indicates an expected call of SendRawTransaction
func (mr *MockPublicTransactionPoolMockRecorder) SendRawTransaction(ctx, encodedTx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawTransaction", reflect.TypeOf((*MockPublicTransactionPool)(nil).SendRawTransaction), ctx, encodedTx)
}

// Sign mocks base method
func (m *MockPublicTransactionPool) Sign(ctx context.Context, addr common.Address, data hexutil.Bytes) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "Sign", ctx, addr, data)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign
func (mr *MockPublicTransactionPoolMockRecorder) Sign(ctx, addr, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockPublicTransactionPool)(nil).Sign), ctx, addr, data)
}

// SignTransaction mocks base method
func (m *MockPublicTransactionPool) SignTransaction(ctx context.Context, args SendTxArgs) (*SignTransactionResult, error) {
	ret := m.ctrl.Call(m, "SignTransaction", ctx, args)
	ret0, _ := ret[0].(*SignTransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignTransaction indicates an expected call of SignTransaction
func (mr *MockPublicTransactionPoolMockRecorder) SignTransaction(ctx, args interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTransaction", reflect.TypeOf((*MockPublicTransactionPool)(nil).SignTransaction), ctx, args)
}

// PendingTransactions mocks base method
func (m *MockPublicTransactionPool) PendingTransactions(ctx context.Context) ([]*RPCTransaction, error) {
	ret := m.ctrl.Call(m, "PendingTransactions", ctx)
	ret0, _ := ret[0].([]*RPCTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingTransactions indicates an expected call of PendingTransactions
func (mr *MockPublicTransactionPoolMockRecorder) PendingTransactions(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingTransactions", reflect.TypeOf((*MockPublicTransactionPool)(nil).PendingTransactions), ctx)
}

// Resend mocks base method
func (m *MockPublicTransactionPool) Resend(ctx context.Context, sendArgs SendTxArgs, gasPrice, gasLimit hexutil.Big) (common.Hash, error) {
	ret := m.ctrl.Call(m, "Resend", ctx, sendArgs, gasPrice, gasLimit)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resend indicates an expected call of Resend
func (mr *MockPublicTransactionPoolMockRecorder) Resend(ctx, sendArgs, gasPrice, gasLimit interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resend", reflect.TypeOf((*MockPublicTransactionPool)(nil).Resend), ctx, sendArgs, gasPrice, gasLimit)
}
