// Code generated by MockGen. DO NOT EDIT.
// Source: eth.go

// Package rpc is a generated GoMock package.
package rpc

import (
	context "context"
	common "github.com/ethereum/go-ethereum/common"
	hexutil "github.com/ethereum/go-ethereum/common/hexutil"
	types "github.com/ethereum/go-ethereum/core/types"
	downloader "github.com/ethereum/go-ethereum/eth/downloader"
	filters "github.com/ethereum/go-ethereum/eth/filters"
	rpc "github.com/ethereum/go-ethereum/rpc"
	gomock "github.com/golang/mock/gomock"
	big "math/big"
	reflect "reflect"
)

// MockEth is a mock of Eth interface
type MockEth struct {
	ctrl     *gomock.Controller
	recorder *MockEthMockRecorder
}

// MockEthMockRecorder is the mock recorder for MockEth
type MockEthMockRecorder struct {
	mock *MockEth
}

// NewMockEth creates a new mock instance
func NewMockEth(ctrl *gomock.Controller) *MockEth {
	mock := &MockEth{ctrl: ctrl}
	mock.recorder = &MockEthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEth) EXPECT() *MockEthMockRecorder {
	return m.recorder
}

// GetBlockTransactionCountByNumber mocks base method
func (m *MockEth) GetBlockTransactionCountByNumber(ctx context.Context, blockNr string) (*hexutil.Uint, error) {
	ret := m.ctrl.Call(m, "GetBlockTransactionCountByNumber", ctx, blockNr)
	ret0, _ := ret[0].(*hexutil.Uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTransactionCountByNumber indicates an expected call of GetBlockTransactionCountByNumber
func (mr *MockEthMockRecorder) GetBlockTransactionCountByNumber(ctx, blockNr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransactionCountByNumber", reflect.TypeOf((*MockEth)(nil).GetBlockTransactionCountByNumber), ctx, blockNr)
}

// GetBlockTransactionCountByHash mocks base method
func (m *MockEth) GetBlockTransactionCountByHash(ctx context.Context, blockHash common.Hash) (*hexutil.Uint, error) {
	ret := m.ctrl.Call(m, "GetBlockTransactionCountByHash", ctx, blockHash)
	ret0, _ := ret[0].(*hexutil.Uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTransactionCountByHash indicates an expected call of GetBlockTransactionCountByHash
func (mr *MockEthMockRecorder) GetBlockTransactionCountByHash(ctx, blockHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransactionCountByHash", reflect.TypeOf((*MockEth)(nil).GetBlockTransactionCountByHash), ctx, blockHash)
}

// GetTransactionByBlockNumberAndIndex mocks base method
func (m *MockEth) GetTransactionByBlockNumberAndIndex(ctx context.Context, blockNr string, index hexutil.Uint) (*RPCTransaction, error) {
	ret := m.ctrl.Call(m, "GetTransactionByBlockNumberAndIndex", ctx, blockNr, index)
	ret0, _ := ret[0].(*RPCTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByBlockNumberAndIndex indicates an expected call of GetTransactionByBlockNumberAndIndex
func (mr *MockEthMockRecorder) GetTransactionByBlockNumberAndIndex(ctx, blockNr, index interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByBlockNumberAndIndex", reflect.TypeOf((*MockEth)(nil).GetTransactionByBlockNumberAndIndex), ctx, blockNr, index)
}

// GetTransactionByBlockHashAndIndex mocks base method
func (m *MockEth) GetTransactionByBlockHashAndIndex(ctx context.Context, blockHash common.Hash, index hexutil.Uint) (*RPCTransaction, error) {
	ret := m.ctrl.Call(m, "GetTransactionByBlockHashAndIndex", ctx, blockHash, index)
	ret0, _ := ret[0].(*RPCTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByBlockHashAndIndex indicates an expected call of GetTransactionByBlockHashAndIndex
func (mr *MockEthMockRecorder) GetTransactionByBlockHashAndIndex(ctx, blockHash, index interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByBlockHashAndIndex", reflect.TypeOf((*MockEth)(nil).GetTransactionByBlockHashAndIndex), ctx, blockHash, index)
}

// GetRawTransactionByBlockNumberAndIndex mocks base method
func (m *MockEth) GetRawTransactionByBlockNumberAndIndex(ctx context.Context, blockNr string, index hexutil.Uint) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "GetRawTransactionByBlockNumberAndIndex", ctx, blockNr, index)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransactionByBlockNumberAndIndex indicates an expected call of GetRawTransactionByBlockNumberAndIndex
func (mr *MockEthMockRecorder) GetRawTransactionByBlockNumberAndIndex(ctx, blockNr, index interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransactionByBlockNumberAndIndex", reflect.TypeOf((*MockEth)(nil).GetRawTransactionByBlockNumberAndIndex), ctx, blockNr, index)
}

// GetRawTransactionByBlockHashAndIndex mocks base method
func (m *MockEth) GetRawTransactionByBlockHashAndIndex(ctx context.Context, blockHash common.Hash, index hexutil.Uint) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "GetRawTransactionByBlockHashAndIndex", ctx, blockHash, index)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransactionByBlockHashAndIndex indicates an expected call of GetRawTransactionByBlockHashAndIndex
func (mr *MockEthMockRecorder) GetRawTransactionByBlockHashAndIndex(ctx, blockHash, index interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransactionByBlockHashAndIndex", reflect.TypeOf((*MockEth)(nil).GetRawTransactionByBlockHashAndIndex), ctx, blockHash, index)
}

// GetTransactionCount mocks base method
func (m *MockEth) GetTransactionCount(ctx context.Context, address common.Address, blockNr string) (*hexutil.Uint64, error) {
	ret := m.ctrl.Call(m, "GetTransactionCount", ctx, address, blockNr)
	ret0, _ := ret[0].(*hexutil.Uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionCount indicates an expected call of GetTransactionCount
func (mr *MockEthMockRecorder) GetTransactionCount(ctx, address, blockNr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionCount", reflect.TypeOf((*MockEth)(nil).GetTransactionCount), ctx, address, blockNr)
}

// GetTransactionByHash mocks base method
func (m *MockEth) GetTransactionByHash(ctx context.Context, hash common.Hash) (*RPCTransaction, error) {
	ret := m.ctrl.Call(m, "GetTransactionByHash", ctx, hash)
	ret0, _ := ret[0].(*RPCTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByHash indicates an expected call of GetTransactionByHash
func (mr *MockEthMockRecorder) GetTransactionByHash(ctx, hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByHash", reflect.TypeOf((*MockEth)(nil).GetTransactionByHash), ctx, hash)
}

// GetRawTransactionByHash mocks base method
func (m *MockEth) GetRawTransactionByHash(ctx context.Context, hash common.Hash) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "GetRawTransactionByHash", ctx, hash)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransactionByHash indicates an expected call of GetRawTransactionByHash
func (mr *MockEthMockRecorder) GetRawTransactionByHash(ctx, hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransactionByHash", reflect.TypeOf((*MockEth)(nil).GetRawTransactionByHash), ctx, hash)
}

// GetTransactionReceipt mocks base method
func (m *MockEth) GetTransactionReceipt(ctx context.Context, hash common.Hash) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetTransactionReceipt", ctx, hash)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionReceipt indicates an expected call of GetTransactionReceipt
func (mr *MockEthMockRecorder) GetTransactionReceipt(ctx, hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionReceipt", reflect.TypeOf((*MockEth)(nil).GetTransactionReceipt), ctx, hash)
}

// SendTransaction mocks base method
func (m *MockEth) SendTransaction(ctx context.Context, args SendTxArgs) (common.Hash, error) {
	ret := m.ctrl.Call(m, "SendTransaction", ctx, args)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransaction indicates an expected call of SendTransaction
func (mr *MockEthMockRecorder) SendTransaction(ctx, args interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockEth)(nil).SendTransaction), ctx, args)
}

// SendRawTransaction mocks base method
func (m *MockEth) SendRawTransaction(ctx context.Context, encodedTx hexutil.Bytes) (common.Hash, error) {
	ret := m.ctrl.Call(m, "SendRawTransaction", ctx, encodedTx)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawTransaction indicates an expected call of SendRawTransaction
func (mr *MockEthMockRecorder) SendRawTransaction(ctx, encodedTx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawTransaction", reflect.TypeOf((*MockEth)(nil).SendRawTransaction), ctx, encodedTx)
}

// Sign mocks base method
func (m *MockEth) Sign(ctx context.Context, addr common.Address, data hexutil.Bytes) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "Sign", ctx, addr, data)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign
func (mr *MockEthMockRecorder) Sign(ctx, addr, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockEth)(nil).Sign), ctx, addr, data)
}

// SignTransaction mocks base method
func (m *MockEth) SignTransaction(ctx context.Context, args SendTxArgs) (*SignTransactionResult, error) {
	ret := m.ctrl.Call(m, "SignTransaction", ctx, args)
	ret0, _ := ret[0].(*SignTransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignTransaction indicates an expected call of SignTransaction
func (mr *MockEthMockRecorder) SignTransaction(ctx, args interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTransaction", reflect.TypeOf((*MockEth)(nil).SignTransaction), ctx, args)
}

// PendingTransactions mocks base method
func (m *MockEth) PendingTransactions(ctx context.Context) ([]*RPCTransaction, error) {
	ret := m.ctrl.Call(m, "PendingTransactions", ctx)
	ret0, _ := ret[0].([]*RPCTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingTransactions indicates an expected call of PendingTransactions
func (mr *MockEthMockRecorder) PendingTransactions(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingTransactions", reflect.TypeOf((*MockEth)(nil).PendingTransactions), ctx)
}

// Resend mocks base method
func (m *MockEth) Resend(ctx context.Context, sendArgs SendTxArgs, gasPrice, gasLimit hexutil.Big) (common.Hash, error) {
	ret := m.ctrl.Call(m, "Resend", ctx, sendArgs, gasPrice, gasLimit)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resend indicates an expected call of Resend
func (mr *MockEthMockRecorder) Resend(ctx, sendArgs, gasPrice, gasLimit interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resend", reflect.TypeOf((*MockEth)(nil).Resend), ctx, sendArgs, gasPrice, gasLimit)
}

// GasPrice mocks base method
func (m *MockEth) GasPrice(ctx context.Context) (*big.Int, error) {
	ret := m.ctrl.Call(m, "GasPrice", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GasPrice indicates an expected call of GasPrice
func (mr *MockEthMockRecorder) GasPrice(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasPrice", reflect.TypeOf((*MockEth)(nil).GasPrice), ctx)
}

// ProtocolVersion mocks base method
func (m *MockEth) ProtocolVersion(ctx context.Context) (hexutil.Uint, error) {
	ret := m.ctrl.Call(m, "ProtocolVersion", ctx)
	ret0, _ := ret[0].(hexutil.Uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProtocolVersion indicates an expected call of ProtocolVersion
func (mr *MockEthMockRecorder) ProtocolVersion(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtocolVersion", reflect.TypeOf((*MockEth)(nil).ProtocolVersion), ctx)
}

// Syncing mocks base method
func (m *MockEth) Syncing(ctx context.Context) (interface{}, error) {
	ret := m.ctrl.Call(m, "Syncing", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Syncing indicates an expected call of Syncing
func (mr *MockEthMockRecorder) Syncing(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Syncing", reflect.TypeOf((*MockEth)(nil).Syncing), ctx)
}

// Etherbase mocks base method
func (m *MockEth) Etherbase(ctx context.Context) (common.Address, error) {
	ret := m.ctrl.Call(m, "Etherbase", ctx)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Etherbase indicates an expected call of Etherbase
func (mr *MockEthMockRecorder) Etherbase(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Etherbase", reflect.TypeOf((*MockEth)(nil).Etherbase), ctx)
}

// Coinbase mocks base method
func (m *MockEth) Coinbase(ctx context.Context) (common.Address, error) {
	ret := m.ctrl.Call(m, "Coinbase", ctx)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Coinbase indicates an expected call of Coinbase
func (mr *MockEthMockRecorder) Coinbase(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Coinbase", reflect.TypeOf((*MockEth)(nil).Coinbase), ctx)
}

// Hashrate mocks base method
func (m *MockEth) Hashrate(ctx context.Context) (hexutil.Uint64, error) {
	ret := m.ctrl.Call(m, "Hashrate", ctx)
	ret0, _ := ret[0].(hexutil.Uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hashrate indicates an expected call of Hashrate
func (mr *MockEthMockRecorder) Hashrate(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hashrate", reflect.TypeOf((*MockEth)(nil).Hashrate), ctx)
}

// BlockNumber mocks base method
func (m *MockEth) BlockNumber(ctx context.Context) (*big.Int, error) {
	ret := m.ctrl.Call(m, "BlockNumber", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockNumber indicates an expected call of BlockNumber
func (mr *MockEthMockRecorder) BlockNumber(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockNumber", reflect.TypeOf((*MockEth)(nil).BlockNumber), ctx)
}

// GetBalance mocks base method
func (m *MockEth) GetBalance(ctx context.Context, address common.Address, blockNr string) (*big.Int, error) {
	ret := m.ctrl.Call(m, "GetBalance", ctx, address, blockNr)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockEthMockRecorder) GetBalance(ctx, address, blockNr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockEth)(nil).GetBalance), ctx, address, blockNr)
}

// GetBlockByNumber mocks base method
func (m *MockEth) GetBlockByNumber(ctx context.Context, blockNr string, fullTx bool) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetBlockByNumber", ctx, blockNr, fullTx)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByNumber indicates an expected call of GetBlockByNumber
func (mr *MockEthMockRecorder) GetBlockByNumber(ctx, blockNr, fullTx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumber", reflect.TypeOf((*MockEth)(nil).GetBlockByNumber), ctx, blockNr, fullTx)
}

// GetBlockByHash mocks base method
func (m *MockEth) GetBlockByHash(ctx context.Context, blockHash common.Hash, fullTx bool) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetBlockByHash", ctx, blockHash, fullTx)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash
func (mr *MockEthMockRecorder) GetBlockByHash(ctx, blockHash, fullTx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockEth)(nil).GetBlockByHash), ctx, blockHash, fullTx)
}

// GetUncleByBlockNumberAndIndex mocks base method
func (m *MockEth) GetUncleByBlockNumberAndIndex(ctx context.Context, blockNr string, index hexutil.Uint) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetUncleByBlockNumberAndIndex", ctx, blockNr, index)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUncleByBlockNumberAndIndex indicates an expected call of GetUncleByBlockNumberAndIndex
func (mr *MockEthMockRecorder) GetUncleByBlockNumberAndIndex(ctx, blockNr, index interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUncleByBlockNumberAndIndex", reflect.TypeOf((*MockEth)(nil).GetUncleByBlockNumberAndIndex), ctx, blockNr, index)
}

// GetUncleByBlockHashAndIndex mocks base method
func (m *MockEth) GetUncleByBlockHashAndIndex(ctx context.Context, blockHash common.Hash, index hexutil.Uint) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetUncleByBlockHashAndIndex", ctx, blockHash, index)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUncleByBlockHashAndIndex indicates an expected call of GetUncleByBlockHashAndIndex
func (mr *MockEthMockRecorder) GetUncleByBlockHashAndIndex(ctx, blockHash, index interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUncleByBlockHashAndIndex", reflect.TypeOf((*MockEth)(nil).GetUncleByBlockHashAndIndex), ctx, blockHash, index)
}

// GetUncleCountByBlockNumber mocks base method
func (m *MockEth) GetUncleCountByBlockNumber(ctx context.Context, blockNr string) (*hexutil.Uint, error) {
	ret := m.ctrl.Call(m, "GetUncleCountByBlockNumber", ctx, blockNr)
	ret0, _ := ret[0].(*hexutil.Uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUncleCountByBlockNumber indicates an expected call of GetUncleCountByBlockNumber
func (mr *MockEthMockRecorder) GetUncleCountByBlockNumber(ctx, blockNr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUncleCountByBlockNumber", reflect.TypeOf((*MockEth)(nil).GetUncleCountByBlockNumber), ctx, blockNr)
}

// GetUncleCountByBlockHash mocks base method
func (m *MockEth) GetUncleCountByBlockHash(ctx context.Context, blockHash common.Hash) (*hexutil.Uint, error) {
	ret := m.ctrl.Call(m, "GetUncleCountByBlockHash", ctx, blockHash)
	ret0, _ := ret[0].(*hexutil.Uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUncleCountByBlockHash indicates an expected call of GetUncleCountByBlockHash
func (mr *MockEthMockRecorder) GetUncleCountByBlockHash(ctx, blockHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUncleCountByBlockHash", reflect.TypeOf((*MockEth)(nil).GetUncleCountByBlockHash), ctx, blockHash)
}

// GetCode mocks base method
func (m *MockEth) GetCode(ctx context.Context, address common.Address, blockNr string) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "GetCode", ctx, address, blockNr)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCode indicates an expected call of GetCode
func (mr *MockEthMockRecorder) GetCode(ctx, address, blockNr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockEth)(nil).GetCode), ctx, address, blockNr)
}

// GetStorageAt mocks base method
func (m *MockEth) GetStorageAt(ctx context.Context, address common.Address, key, blockNr string) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "GetStorageAt", ctx, address, key, blockNr)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageAt indicates an expected call of GetStorageAt
func (mr *MockEthMockRecorder) GetStorageAt(ctx, address, key, blockNr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageAt", reflect.TypeOf((*MockEth)(nil).GetStorageAt), ctx, address, key, blockNr)
}

// Call mocks base method
func (m *MockEth) Call(ctx context.Context, args CallArgs, blockNr string) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "Call", ctx, args, blockNr)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call
func (mr *MockEthMockRecorder) Call(ctx, args, blockNr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockEth)(nil).Call), ctx, args, blockNr)
}

// EstimateGas mocks base method
func (m *MockEth) EstimateGas(ctx context.Context, args CallArgs) (*hexutil.Big, error) {
	ret := m.ctrl.Call(m, "EstimateGas", ctx, args)
	ret0, _ := ret[0].(*hexutil.Big)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGas indicates an expected call of EstimateGas
func (mr *MockEthMockRecorder) EstimateGas(ctx, args interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockEth)(nil).EstimateGas), ctx, args)
}

// Accounts mocks base method
func (m *MockEth) Accounts(arg0 context.Context) ([]common.Address, error) {
	ret := m.ctrl.Call(m, "Accounts", arg0)
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Accounts indicates an expected call of Accounts
func (mr *MockEthMockRecorder) Accounts(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accounts", reflect.TypeOf((*MockEth)(nil).Accounts), arg0)
}

// Mining mocks base method
func (m *MockEth) Mining(ctx context.Context) (bool, error) {
	ret := m.ctrl.Call(m, "Mining", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mining indicates an expected call of Mining
func (mr *MockEthMockRecorder) Mining(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mining", reflect.TypeOf((*MockEth)(nil).Mining), ctx)
}

// SubmitWork mocks base method
func (m *MockEth) SubmitWork(ctx context.Context, nonce types.BlockNonce, solution, digest common.Hash) (bool, error) {
	ret := m.ctrl.Call(m, "SubmitWork", ctx, nonce, solution, digest)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitWork indicates an expected call of SubmitWork
func (mr *MockEthMockRecorder) SubmitWork(ctx, nonce, solution, digest interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitWork", reflect.TypeOf((*MockEth)(nil).SubmitWork), ctx, nonce, solution, digest)
}

// GetWork mocks base method
func (m *MockEth) GetWork(ctx context.Context) ([3]string, error) {
	ret := m.ctrl.Call(m, "GetWork", ctx)
	ret0, _ := ret[0].([3]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWork indicates an expected call of GetWork
func (mr *MockEthMockRecorder) GetWork(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWork", reflect.TypeOf((*MockEth)(nil).GetWork), ctx)
}

// SubmitHashrate mocks base method
func (m *MockEth) SubmitHashrate(ctx context.Context, hashrate hexutil.Uint64, id common.Hash) (bool, error) {
	ret := m.ctrl.Call(m, "SubmitHashrate", ctx, hashrate, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitHashrate indicates an expected call of SubmitHashrate
func (mr *MockEthMockRecorder) SubmitHashrate(ctx, hashrate, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitHashrate", reflect.TypeOf((*MockEth)(nil).SubmitHashrate), ctx, hashrate, id)
}

// SubscribeSyncStatus mocks base method
func (m *MockEth) SubscribeSyncStatus(ctx context.Context, status chan interface{}) (*downloader.SyncStatusSubscription, error) {
	ret := m.ctrl.Call(m, "SubscribeSyncStatus", ctx, status)
	ret0, _ := ret[0].(*downloader.SyncStatusSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeSyncStatus indicates an expected call of SubscribeSyncStatus
func (mr *MockEthMockRecorder) SubscribeSyncStatus(ctx, status interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeSyncStatus", reflect.TypeOf((*MockEth)(nil).SubscribeSyncStatus), ctx, status)
}

// NewPendingTransactionFilter mocks base method
func (m *MockEth) NewPendingTransactionFilter(ctx context.Context) (rpc.ID, error) {
	ret := m.ctrl.Call(m, "NewPendingTransactionFilter", ctx)
	ret0, _ := ret[0].(rpc.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewPendingTransactionFilter indicates an expected call of NewPendingTransactionFilter
func (mr *MockEthMockRecorder) NewPendingTransactionFilter(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPendingTransactionFilter", reflect.TypeOf((*MockEth)(nil).NewPendingTransactionFilter), ctx)
}

// NewPendingTransactions mocks base method
func (m *MockEth) NewPendingTransactions(ctx context.Context) (*rpc.Subscription, error) {
	ret := m.ctrl.Call(m, "NewPendingTransactions", ctx)
	ret0, _ := ret[0].(*rpc.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewPendingTransactions indicates an expected call of NewPendingTransactions
func (mr *MockEthMockRecorder) NewPendingTransactions(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPendingTransactions", reflect.TypeOf((*MockEth)(nil).NewPendingTransactions), ctx)
}

// NewBlockFilter mocks base method
func (m *MockEth) NewBlockFilter(ctx context.Context) (rpc.ID, error) {
	ret := m.ctrl.Call(m, "NewBlockFilter", ctx)
	ret0, _ := ret[0].(rpc.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewBlockFilter indicates an expected call of NewBlockFilter
func (mr *MockEthMockRecorder) NewBlockFilter(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBlockFilter", reflect.TypeOf((*MockEth)(nil).NewBlockFilter), ctx)
}

// NewHeads mocks base method
func (m *MockEth) NewHeads(ctx context.Context) (*rpc.Subscription, error) {
	ret := m.ctrl.Call(m, "NewHeads", ctx)
	ret0, _ := ret[0].(*rpc.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewHeads indicates an expected call of NewHeads
func (mr *MockEthMockRecorder) NewHeads(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewHeads", reflect.TypeOf((*MockEth)(nil).NewHeads), ctx)
}

// Logs mocks base method
func (m *MockEth) Logs(ctx context.Context, crit filters.FilterCriteria) (*rpc.Subscription, error) {
	ret := m.ctrl.Call(m, "Logs", ctx, crit)
	ret0, _ := ret[0].(*rpc.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logs indicates an expected call of Logs
func (mr *MockEthMockRecorder) Logs(ctx, crit interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockEth)(nil).Logs), ctx, crit)
}

// MockPublicTransactionPool is a mock of PublicTransactionPool interface
type MockPublicTransactionPool struct {
	ctrl     *gomock.Controller
	recorder *MockPublicTransactionPoolMockRecorder
}

// MockPublicTransactionPoolMockRecorder is the mock recorder for MockPublicTransactionPool
type MockPublicTransactionPoolMockRecorder struct {
	mock *MockPublicTransactionPool
}

// NewMockPublicTransactionPool creates a new mock instance
func NewMockPublicTransactionPool(ctrl *gomock.Controller) *MockPublicTransactionPool {
	mock := &MockPublicTransactionPool{ctrl: ctrl}
	mock.recorder = &MockPublicTransactionPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublicTransactionPool) EXPECT() *MockPublicTransactionPoolMockRecorder {
	return m.recorder
}

// GetBlockTransactionCountByNumber mocks base method
func (m *MockPublicTransactionPool) GetBlockTransactionCountByNumber(ctx context.Context, blockNr string) (*hexutil.Uint, error) {
	ret := m.ctrl.Call(m, "GetBlockTransactionCountByNumber", ctx, blockNr)
	ret0, _ := ret[0].(*hexutil.Uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTransactionCountByNumber indicates an expected call of GetBlockTransactionCountByNumber
func (mr *MockPublicTransactionPoolMockRecorder) GetBlockTransactionCountByNumber(ctx, blockNr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransactionCountByNumber", reflect.TypeOf((*MockPublicTransactionPool)(nil).GetBlockTransactionCountByNumber), ctx, blockNr)
}

// GetBlockTransactionCountByHash mocks base method
func (m *MockPublicTransactionPool) GetBlockTransactionCountByHash(ctx context.Context, blockHash common.Hash) (*hexutil.Uint, error) {
	ret := m.ctrl.Call(m, "GetBlockTransactionCountByHash", ctx, blockHash)
	ret0, _ := ret[0].(*hexutil.Uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTransactionCountByHash indicates an expected call of GetBlockTransactionCountByHash
func (mr *MockPublicTransactionPoolMockRecorder) GetBlockTransactionCountByHash(ctx, blockHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransactionCountByHash", reflect.TypeOf((*MockPublicTransactionPool)(nil).GetBlockTransactionCountByHash), ctx, blockHash)
}

// GetTransactionByBlockNumberAndIndex mocks base method
func (m *MockPublicTransactionPool) GetTransactionByBlockNumberAndIndex(ctx context.Context, blockNr string, index hexutil.Uint) (*RPCTransaction, error) {
	ret := m.ctrl.Call(m, "GetTransactionByBlockNumberAndIndex", ctx, blockNr, index)
	ret0, _ := ret[0].(*RPCTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByBlockNumberAndIndex indicates an expected call of GetTransactionByBlockNumberAndIndex
func (mr *MockPublicTransactionPoolMockRecorder) GetTransactionByBlockNumberAndIndex(ctx, blockNr, index interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByBlockNumberAndIndex", reflect.TypeOf((*MockPublicTransactionPool)(nil).GetTransactionByBlockNumberAndIndex), ctx, blockNr, index)
}

// GetTransactionByBlockHashAndIndex mocks base method
func (m *MockPublicTransactionPool) GetTransactionByBlockHashAndIndex(ctx context.Context, blockHash common.Hash, index hexutil.Uint) (*RPCTransaction, error) {
	ret := m.ctrl.Call(m, "GetTransactionByBlockHashAndIndex", ctx, blockHash, index)
	ret0, _ := ret[0].(*RPCTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByBlockHashAndIndex indicates an expected call of GetTransactionByBlockHashAndIndex
func (mr *MockPublicTransactionPoolMockRecorder) GetTransactionByBlockHashAndIndex(ctx, blockHash, index interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByBlockHashAndIndex", reflect.TypeOf((*MockPublicTransactionPool)(nil).GetTransactionByBlockHashAndIndex), ctx, blockHash, index)
}

// GetRawTransactionByBlockNumberAndIndex mocks base method
func (m *MockPublicTransactionPool) GetRawTransactionByBlockNumberAndIndex(ctx context.Context, blockNr string, index hexutil.Uint) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "GetRawTransactionByBlockNumberAndIndex", ctx, blockNr, index)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransactionByBlockNumberAndIndex indicates an expected call of GetRawTransactionByBlockNumberAndIndex
func (mr *MockPublicTransactionPoolMockRecorder) GetRawTransactionByBlockNumberAndIndex(ctx, blockNr, index interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransactionByBlockNumberAndIndex", reflect.TypeOf((*MockPublicTransactionPool)(nil).GetRawTransactionByBlockNumberAndIndex), ctx, blockNr, index)
}

// GetRawTransactionByBlockHashAndIndex mocks base method
func (m *MockPublicTransactionPool) GetRawTransactionByBlockHashAndIndex(ctx context.Context, blockHash common.Hash, index hexutil.Uint) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "GetRawTransactionByBlockHashAndIndex", ctx, blockHash, index)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransactionByBlockHashAndIndex indicates an expected call of GetRawTransactionByBlockHashAndIndex
func (mr *MockPublicTransactionPoolMockRecorder) GetRawTransactionByBlockHashAndIndex(ctx, blockHash, index interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransactionByBlockHashAndIndex", reflect.TypeOf((*MockPublicTransactionPool)(nil).GetRawTransactionByBlockHashAndIndex), ctx, blockHash, index)
}

// GetTransactionCount mocks base method
func (m *MockPublicTransactionPool) GetTransactionCount(ctx context.Context, address common.Address, blockNr string) (*hexutil.Uint64, error) {
	ret := m.ctrl.Call(m, "GetTransactionCount", ctx, address, blockNr)
	ret0, _ := ret[0].(*hexutil.Uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionCount indicates an expected call of GetTransactionCount
func (mr *MockPublicTransactionPoolMockRecorder) GetTransactionCount(ctx, address, blockNr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionCount", reflect.TypeOf((*MockPublicTransactionPool)(nil).GetTransactionCount), ctx, address, blockNr)
}

// GetTransactionByHash mocks base method
func (m *MockPublicTransactionPool) GetTransactionByHash(ctx context.Context, hash common.Hash) (*RPCTransaction, error) {
	ret := m.ctrl.Call(m, "GetTransactionByHash", ctx, hash)
	ret0, _ := ret[0].(*RPCTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByHash indicates an expected call of GetTransactionByHash
func (mr *MockPublicTransactionPoolMockRecorder) GetTransactionByHash(ctx, hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByHash", reflect.TypeOf((*MockPublicTransactionPool)(nil).GetTransactionByHash), ctx, hash)
}

// GetRawTransactionByHash mocks base method
func (m *MockPublicTransactionPool) GetRawTransactionByHash(ctx context.Context, hash common.Hash) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "GetRawTransactionByHash", ctx, hash)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawTransactionByHash indicates an expected call of GetRawTransactionByHash
func (mr *MockPublicTransactionPoolMockRecorder) GetRawTransactionByHash(ctx, hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawTransactionByHash", reflect.TypeOf((*MockPublicTransactionPool)(nil).GetRawTransactionByHash), ctx, hash)
}

// GetTransactionReceipt mocks base method
func (m *MockPublicTransactionPool) GetTransactionReceipt(ctx context.Context, hash common.Hash) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetTransactionReceipt", ctx, hash)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionReceipt indicates an expected call of GetTransactionReceipt
func (mr *MockPublicTransactionPoolMockRecorder) GetTransactionReceipt(ctx, hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionReceipt", reflect.TypeOf((*MockPublicTransactionPool)(nil).GetTransactionReceipt), ctx, hash)
}

// SendTransaction mocks base method
func (m *MockPublicTransactionPool) SendTransaction(ctx context.Context, args SendTxArgs) (common.Hash, error) {
	ret := m.ctrl.Call(m, "SendTransaction", ctx, args)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransaction indicates an expected call of SendTransaction
func (mr *MockPublicTransactionPoolMockRecorder) SendTransaction(ctx, args interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockPublicTransactionPool)(nil).SendTransaction), ctx, args)
}

// SendRawTransaction mocks base method
func (m *MockPublicTransactionPool) SendRawTransaction(ctx context.Context, encodedTx hexutil.Bytes) (common.Hash, error) {
	ret := m.ctrl.Call(m, "SendRawTransaction", ctx, encodedTx)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawTransaction indicates an expected call of SendRawTransaction
func (mr *MockPublicTransactionPoolMockRecorder) SendRawTransaction(ctx, encodedTx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawTransaction", reflect.TypeOf((*MockPublicTransactionPool)(nil).SendRawTransaction), ctx, encodedTx)
}

// Sign mocks base method
func (m *MockPublicTransactionPool) Sign(ctx context.Context, addr common.Address, data hexutil.Bytes) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "Sign", ctx, addr, data)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign
func (mr *MockPublicTransactionPoolMockRecorder) Sign(ctx, addr, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockPublicTransactionPool)(nil).Sign), ctx, addr, data)
}

// SignTransaction mocks base method
func (m *MockPublicTransactionPool) SignTransaction(ctx context.Context, args SendTxArgs) (*SignTransactionResult, error) {
	ret := m.ctrl.Call(m, "SignTransaction", ctx, args)
	ret0, _ := ret[0].(*SignTransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignTransaction indicates an expected call of SignTransaction
func (mr *MockPublicTransactionPoolMockRecorder) SignTransaction(ctx, args interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTransaction", reflect.TypeOf((*MockPublicTransactionPool)(nil).SignTransaction), ctx, args)
}

// PendingTransactions mocks base method
func (m *MockPublicTransactionPool) PendingTransactions(ctx context.Context) ([]*RPCTransaction, error) {
	ret := m.ctrl.Call(m, "PendingTransactions", ctx)
	ret0, _ := ret[0].([]*RPCTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingTransactions indicates an expected call of PendingTransactions
func (mr *MockPublicTransactionPoolMockRecorder) PendingTransactions(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingTransactions", reflect.TypeOf((*MockPublicTransactionPool)(nil).PendingTransactions), ctx)
}

// Resend mocks base method
func (m *MockPublicTransactionPool) Resend(ctx context.Context, sendArgs SendTxArgs, gasPrice, gasLimit hexutil.Big) (common.Hash, error) {
	ret := m.ctrl.Call(m, "Resend", ctx, sendArgs, gasPrice, gasLimit)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resend indicates an expected call of Resend
func (mr *MockPublicTransactionPoolMockRecorder) Resend(ctx, sendArgs, gasPrice, gasLimit interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resend", reflect.TypeOf((*MockPublicTransactionPool)(nil).Resend), ctx, sendArgs, gasPrice, gasLimit)
}

// MockPublicEthereum is a mock of PublicEthereum interface
type MockPublicEthereum struct {
	ctrl     *gomock.Controller
	recorder *MockPublicEthereumMockRecorder
}

// MockPublicEthereumMockRecorder is the mock recorder for MockPublicEthereum
type MockPublicEthereumMockRecorder struct {
	mock *MockPublicEthereum
}

// NewMockPublicEthereum creates a new mock instance
func NewMockPublicEthereum(ctrl *gomock.Controller) *MockPublicEthereum {
	mock := &MockPublicEthereum{ctrl: ctrl}
	mock.recorder = &MockPublicEthereumMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublicEthereum) EXPECT() *MockPublicEthereumMockRecorder {
	return m.recorder
}

// GasPrice mocks base method
func (m *MockPublicEthereum) GasPrice(ctx context.Context) (*big.Int, error) {
	ret := m.ctrl.Call(m, "GasPrice", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GasPrice indicates an expected call of GasPrice
func (mr *MockPublicEthereumMockRecorder) GasPrice(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasPrice", reflect.TypeOf((*MockPublicEthereum)(nil).GasPrice), ctx)
}

// ProtocolVersion mocks base method
func (m *MockPublicEthereum) ProtocolVersion(ctx context.Context) (hexutil.Uint, error) {
	ret := m.ctrl.Call(m, "ProtocolVersion", ctx)
	ret0, _ := ret[0].(hexutil.Uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProtocolVersion indicates an expected call of ProtocolVersion
func (mr *MockPublicEthereumMockRecorder) ProtocolVersion(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtocolVersion", reflect.TypeOf((*MockPublicEthereum)(nil).ProtocolVersion), ctx)
}

// Syncing mocks base method
func (m *MockPublicEthereum) Syncing(ctx context.Context) (interface{}, error) {
	ret := m.ctrl.Call(m, "Syncing", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Syncing indicates an expected call of Syncing
func (mr *MockPublicEthereumMockRecorder) Syncing(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Syncing", reflect.TypeOf((*MockPublicEthereum)(nil).Syncing), ctx)
}

// Etherbase mocks base method
func (m *MockPublicEthereum) Etherbase(ctx context.Context) (common.Address, error) {
	ret := m.ctrl.Call(m, "Etherbase", ctx)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Etherbase indicates an expected call of Etherbase
func (mr *MockPublicEthereumMockRecorder) Etherbase(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Etherbase", reflect.TypeOf((*MockPublicEthereum)(nil).Etherbase), ctx)
}

// Coinbase mocks base method
func (m *MockPublicEthereum) Coinbase(ctx context.Context) (common.Address, error) {
	ret := m.ctrl.Call(m, "Coinbase", ctx)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Coinbase indicates an expected call of Coinbase
func (mr *MockPublicEthereumMockRecorder) Coinbase(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Coinbase", reflect.TypeOf((*MockPublicEthereum)(nil).Coinbase), ctx)
}

// Hashrate mocks base method
func (m *MockPublicEthereum) Hashrate(ctx context.Context) (hexutil.Uint64, error) {
	ret := m.ctrl.Call(m, "Hashrate", ctx)
	ret0, _ := ret[0].(hexutil.Uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hashrate indicates an expected call of Hashrate
func (mr *MockPublicEthereumMockRecorder) Hashrate(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hashrate", reflect.TypeOf((*MockPublicEthereum)(nil).Hashrate), ctx)
}

// MockPublicBlockChain is a mock of PublicBlockChain interface
type MockPublicBlockChain struct {
	ctrl     *gomock.Controller
	recorder *MockPublicBlockChainMockRecorder
}

// MockPublicBlockChainMockRecorder is the mock recorder for MockPublicBlockChain
type MockPublicBlockChainMockRecorder struct {
	mock *MockPublicBlockChain
}

// NewMockPublicBlockChain creates a new mock instance
func NewMockPublicBlockChain(ctrl *gomock.Controller) *MockPublicBlockChain {
	mock := &MockPublicBlockChain{ctrl: ctrl}
	mock.recorder = &MockPublicBlockChainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublicBlockChain) EXPECT() *MockPublicBlockChainMockRecorder {
	return m.recorder
}

// BlockNumber mocks base method
func (m *MockPublicBlockChain) BlockNumber(ctx context.Context) (*big.Int, error) {
	ret := m.ctrl.Call(m, "BlockNumber", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockNumber indicates an expected call of BlockNumber
func (mr *MockPublicBlockChainMockRecorder) BlockNumber(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockNumber", reflect.TypeOf((*MockPublicBlockChain)(nil).BlockNumber), ctx)
}

// GetBalance mocks base method
func (m *MockPublicBlockChain) GetBalance(ctx context.Context, address common.Address, blockNr string) (*big.Int, error) {
	ret := m.ctrl.Call(m, "GetBalance", ctx, address, blockNr)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockPublicBlockChainMockRecorder) GetBalance(ctx, address, blockNr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockPublicBlockChain)(nil).GetBalance), ctx, address, blockNr)
}

// GetBlockByNumber mocks base method
func (m *MockPublicBlockChain) GetBlockByNumber(ctx context.Context, blockNr string, fullTx bool) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetBlockByNumber", ctx, blockNr, fullTx)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByNumber indicates an expected call of GetBlockByNumber
func (mr *MockPublicBlockChainMockRecorder) GetBlockByNumber(ctx, blockNr, fullTx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumber", reflect.TypeOf((*MockPublicBlockChain)(nil).GetBlockByNumber), ctx, blockNr, fullTx)
}

// GetBlockByHash mocks base method
func (m *MockPublicBlockChain) GetBlockByHash(ctx context.Context, blockHash common.Hash, fullTx bool) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetBlockByHash", ctx, blockHash, fullTx)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash
func (mr *MockPublicBlockChainMockRecorder) GetBlockByHash(ctx, blockHash, fullTx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockPublicBlockChain)(nil).GetBlockByHash), ctx, blockHash, fullTx)
}

// GetUncleByBlockNumberAndIndex mocks base method
func (m *MockPublicBlockChain) GetUncleByBlockNumberAndIndex(ctx context.Context, blockNr string, index hexutil.Uint) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetUncleByBlockNumberAndIndex", ctx, blockNr, index)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUncleByBlockNumberAndIndex indicates an expected call of GetUncleByBlockNumberAndIndex
func (mr *MockPublicBlockChainMockRecorder) GetUncleByBlockNumberAndIndex(ctx, blockNr, index interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUncleByBlockNumberAndIndex", reflect.TypeOf((*MockPublicBlockChain)(nil).GetUncleByBlockNumberAndIndex), ctx, blockNr, index)
}

// GetUncleByBlockHashAndIndex mocks base method
func (m *MockPublicBlockChain) GetUncleByBlockHashAndIndex(ctx context.Context, blockHash common.Hash, index hexutil.Uint) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetUncleByBlockHashAndIndex", ctx, blockHash, index)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUncleByBlockHashAndIndex indicates an expected call of GetUncleByBlockHashAndIndex
func (mr *MockPublicBlockChainMockRecorder) GetUncleByBlockHashAndIndex(ctx, blockHash, index interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUncleByBlockHashAndIndex", reflect.TypeOf((*MockPublicBlockChain)(nil).GetUncleByBlockHashAndIndex), ctx, blockHash, index)
}

// GetUncleCountByBlockNumber mocks base method
func (m *MockPublicBlockChain) GetUncleCountByBlockNumber(ctx context.Context, blockNr string) (*hexutil.Uint, error) {
	ret := m.ctrl.Call(m, "GetUncleCountByBlockNumber", ctx, blockNr)
	ret0, _ := ret[0].(*hexutil.Uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUncleCountByBlockNumber indicates an expected call of GetUncleCountByBlockNumber
func (mr *MockPublicBlockChainMockRecorder) GetUncleCountByBlockNumber(ctx, blockNr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUncleCountByBlockNumber", reflect.TypeOf((*MockPublicBlockChain)(nil).GetUncleCountByBlockNumber), ctx, blockNr)
}

// GetUncleCountByBlockHash mocks base method
func (m *MockPublicBlockChain) GetUncleCountByBlockHash(ctx context.Context, blockHash common.Hash) (*hexutil.Uint, error) {
	ret := m.ctrl.Call(m, "GetUncleCountByBlockHash", ctx, blockHash)
	ret0, _ := ret[0].(*hexutil.Uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUncleCountByBlockHash indicates an expected call of GetUncleCountByBlockHash
func (mr *MockPublicBlockChainMockRecorder) GetUncleCountByBlockHash(ctx, blockHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUncleCountByBlockHash", reflect.TypeOf((*MockPublicBlockChain)(nil).GetUncleCountByBlockHash), ctx, blockHash)
}

// GetCode mocks base method
func (m *MockPublicBlockChain) GetCode(ctx context.Context, address common.Address, blockNr string) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "GetCode", ctx, address, blockNr)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCode indicates an expected call of GetCode
func (mr *MockPublicBlockChainMockRecorder) GetCode(ctx, address, blockNr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockPublicBlockChain)(nil).GetCode), ctx, address, blockNr)
}

// GetStorageAt mocks base method
func (m *MockPublicBlockChain) GetStorageAt(ctx context.Context, address common.Address, key, blockNr string) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "GetStorageAt", ctx, address, key, blockNr)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageAt indicates an expected call of GetStorageAt
func (mr *MockPublicBlockChainMockRecorder) GetStorageAt(ctx, address, key, blockNr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageAt", reflect.TypeOf((*MockPublicBlockChain)(nil).GetStorageAt), ctx, address, key, blockNr)
}

// Call mocks base method
func (m *MockPublicBlockChain) Call(ctx context.Context, args CallArgs, blockNr string) (hexutil.Bytes, error) {
	ret := m.ctrl.Call(m, "Call", ctx, args, blockNr)
	ret0, _ := ret[0].(hexutil.Bytes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call
func (mr *MockPublicBlockChainMockRecorder) Call(ctx, args, blockNr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockPublicBlockChain)(nil).Call), ctx, args, blockNr)
}

// EstimateGas mocks base method
func (m *MockPublicBlockChain) EstimateGas(ctx context.Context, args CallArgs) (*hexutil.Big, error) {
	ret := m.ctrl.Call(m, "EstimateGas", ctx, args)
	ret0, _ := ret[0].(*hexutil.Big)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGas indicates an expected call of EstimateGas
func (mr *MockPublicBlockChainMockRecorder) EstimateGas(ctx, args interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockPublicBlockChain)(nil).EstimateGas), ctx, args)
}

// MockPublicAccount is a mock of PublicAccount interface
type MockPublicAccount struct {
	ctrl     *gomock.Controller
	recorder *MockPublicAccountMockRecorder
}

// MockPublicAccountMockRecorder is the mock recorder for MockPublicAccount
type MockPublicAccountMockRecorder struct {
	mock *MockPublicAccount
}

// NewMockPublicAccount creates a new mock instance
func NewMockPublicAccount(ctrl *gomock.Controller) *MockPublicAccount {
	mock := &MockPublicAccount{ctrl: ctrl}
	mock.recorder = &MockPublicAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublicAccount) EXPECT() *MockPublicAccountMockRecorder {
	return m.recorder
}

// Accounts mocks base method
func (m *MockPublicAccount) Accounts(arg0 context.Context) ([]common.Address, error) {
	ret := m.ctrl.Call(m, "Accounts", arg0)
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Accounts indicates an expected call of Accounts
func (mr *MockPublicAccountMockRecorder) Accounts(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accounts", reflect.TypeOf((*MockPublicAccount)(nil).Accounts), arg0)
}

// MockPublicMiner is a mock of PublicMiner interface
type MockPublicMiner struct {
	ctrl     *gomock.Controller
	recorder *MockPublicMinerMockRecorder
}

// MockPublicMinerMockRecorder is the mock recorder for MockPublicMiner
type MockPublicMinerMockRecorder struct {
	mock *MockPublicMiner
}

// NewMockPublicMiner creates a new mock instance
func NewMockPublicMiner(ctrl *gomock.Controller) *MockPublicMiner {
	mock := &MockPublicMiner{ctrl: ctrl}
	mock.recorder = &MockPublicMinerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublicMiner) EXPECT() *MockPublicMinerMockRecorder {
	return m.recorder
}

// Mining mocks base method
func (m *MockPublicMiner) Mining(ctx context.Context) (bool, error) {
	ret := m.ctrl.Call(m, "Mining", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mining indicates an expected call of Mining
func (mr *MockPublicMinerMockRecorder) Mining(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mining", reflect.TypeOf((*MockPublicMiner)(nil).Mining), ctx)
}

// SubmitWork mocks base method
func (m *MockPublicMiner) SubmitWork(ctx context.Context, nonce types.BlockNonce, solution, digest common.Hash) (bool, error) {
	ret := m.ctrl.Call(m, "SubmitWork", ctx, nonce, solution, digest)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitWork indicates an expected call of SubmitWork
func (mr *MockPublicMinerMockRecorder) SubmitWork(ctx, nonce, solution, digest interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitWork", reflect.TypeOf((*MockPublicMiner)(nil).SubmitWork), ctx, nonce, solution, digest)
}

// GetWork mocks base method
func (m *MockPublicMiner) GetWork(ctx context.Context) ([3]string, error) {
	ret := m.ctrl.Call(m, "GetWork", ctx)
	ret0, _ := ret[0].([3]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWork indicates an expected call of GetWork
func (mr *MockPublicMinerMockRecorder) GetWork(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWork", reflect.TypeOf((*MockPublicMiner)(nil).GetWork), ctx)
}

// SubmitHashrate mocks base method
func (m *MockPublicMiner) SubmitHashrate(ctx context.Context, hashrate hexutil.Uint64, id common.Hash) (bool, error) {
	ret := m.ctrl.Call(m, "SubmitHashrate", ctx, hashrate, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitHashrate indicates an expected call of SubmitHashrate
func (mr *MockPublicMinerMockRecorder) SubmitHashrate(ctx, hashrate, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitHashrate", reflect.TypeOf((*MockPublicMiner)(nil).SubmitHashrate), ctx, hashrate, id)
}

// MockPublicDownloader is a mock of PublicDownloader interface
type MockPublicDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockPublicDownloaderMockRecorder
}

// MockPublicDownloaderMockRecorder is the mock recorder for MockPublicDownloader
type MockPublicDownloaderMockRecorder struct {
	mock *MockPublicDownloader
}

// NewMockPublicDownloader creates a new mock instance
func NewMockPublicDownloader(ctrl *gomock.Controller) *MockPublicDownloader {
	mock := &MockPublicDownloader{ctrl: ctrl}
	mock.recorder = &MockPublicDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublicDownloader) EXPECT() *MockPublicDownloaderMockRecorder {
	return m.recorder
}

// SubscribeSyncStatus mocks base method
func (m *MockPublicDownloader) SubscribeSyncStatus(ctx context.Context, status chan interface{}) (*downloader.SyncStatusSubscription, error) {
	ret := m.ctrl.Call(m, "SubscribeSyncStatus", ctx, status)
	ret0, _ := ret[0].(*downloader.SyncStatusSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeSyncStatus indicates an expected call of SubscribeSyncStatus
func (mr *MockPublicDownloaderMockRecorder) SubscribeSyncStatus(ctx, status interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeSyncStatus", reflect.TypeOf((*MockPublicDownloader)(nil).SubscribeSyncStatus), ctx, status)
}

// MockPublicFilter is a mock of PublicFilter interface
type MockPublicFilter struct {
	ctrl     *gomock.Controller
	recorder *MockPublicFilterMockRecorder
}

// MockPublicFilterMockRecorder is the mock recorder for MockPublicFilter
type MockPublicFilterMockRecorder struct {
	mock *MockPublicFilter
}

// NewMockPublicFilter creates a new mock instance
func NewMockPublicFilter(ctrl *gomock.Controller) *MockPublicFilter {
	mock := &MockPublicFilter{ctrl: ctrl}
	mock.recorder = &MockPublicFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublicFilter) EXPECT() *MockPublicFilterMockRecorder {
	return m.recorder
}

// NewPendingTransactionFilter mocks base method
func (m *MockPublicFilter) NewPendingTransactionFilter(ctx context.Context) (rpc.ID, error) {
	ret := m.ctrl.Call(m, "NewPendingTransactionFilter", ctx)
	ret0, _ := ret[0].(rpc.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewPendingTransactionFilter indicates an expected call of NewPendingTransactionFilter
func (mr *MockPublicFilterMockRecorder) NewPendingTransactionFilter(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPendingTransactionFilter", reflect.TypeOf((*MockPublicFilter)(nil).NewPendingTransactionFilter), ctx)
}

// NewPendingTransactions mocks base method
func (m *MockPublicFilter) NewPendingTransactions(ctx context.Context) (*rpc.Subscription, error) {
	ret := m.ctrl.Call(m, "NewPendingTransactions", ctx)
	ret0, _ := ret[0].(*rpc.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewPendingTransactions indicates an expected call of NewPendingTransactions
func (mr *MockPublicFilterMockRecorder) NewPendingTransactions(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPendingTransactions", reflect.TypeOf((*MockPublicFilter)(nil).NewPendingTransactions), ctx)
}

// NewBlockFilter mocks base method
func (m *MockPublicFilter) NewBlockFilter(ctx context.Context) (rpc.ID, error) {
	ret := m.ctrl.Call(m, "NewBlockFilter", ctx)
	ret0, _ := ret[0].(rpc.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewBlockFilter indicates an expected call of NewBlockFilter
func (mr *MockPublicFilterMockRecorder) NewBlockFilter(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBlockFilter", reflect.TypeOf((*MockPublicFilter)(nil).NewBlockFilter), ctx)
}

// NewHeads mocks base method
func (m *MockPublicFilter) NewHeads(ctx context.Context) (*rpc.Subscription, error) {
	ret := m.ctrl.Call(m, "NewHeads", ctx)
	ret0, _ := ret[0].(*rpc.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewHeads indicates an expected call of NewHeads
func (mr *MockPublicFilterMockRecorder) NewHeads(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewHeads", reflect.TypeOf((*MockPublicFilter)(nil).NewHeads), ctx)
}

// Logs mocks base method
func (m *MockPublicFilter) Logs(ctx context.Context, crit filters.FilterCriteria) (*rpc.Subscription, error) {
	ret := m.ctrl.Call(m, "Logs", ctx, crit)
	ret0, _ := ret[0].(*rpc.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logs indicates an expected call of Logs
func (mr *MockPublicFilterMockRecorder) Logs(ctx, crit interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockPublicFilter)(nil).Logs), ctx, crit)
}
