// Code generated by MockGen. DO NOT EDIT.
// Source: admin.go

// Package rpc is a generated GoMock package.
package rpc

import (
	context "context"
	p2p "github.com/ethereum/go-ethereum/p2p"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAdmin is a mock of Admin interface
type MockAdmin struct {
	ctrl     *gomock.Controller
	recorder *MockAdminMockRecorder
}

// MockAdminMockRecorder is the mock recorder for MockAdmin
type MockAdminMockRecorder struct {
	mock *MockAdmin
}

// NewMockAdmin creates a new mock instance
func NewMockAdmin(ctrl *gomock.Controller) *MockAdmin {
	mock := &MockAdmin{ctrl: ctrl}
	mock.recorder = &MockAdminMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdmin) EXPECT() *MockAdminMockRecorder {
	return m.recorder
}

// AddPeer mocks base method
func (m *MockAdmin) AddPeer(ctx context.Context, nodeURL string) (bool, error) {
	ret := m.ctrl.Call(m, "AddPeer", ctx, nodeURL)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPeer indicates an expected call of AddPeer
func (mr *MockAdminMockRecorder) AddPeer(ctx, nodeURL interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeer", reflect.TypeOf((*MockAdmin)(nil).AddPeer), ctx, nodeURL)
}

// RemovePeer mocks base method
func (m *MockAdmin) RemovePeer(ctx context.Context, nodeURL string) (bool, error) {
	ret := m.ctrl.Call(m, "RemovePeer", ctx, nodeURL)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePeer indicates an expected call of RemovePeer
func (mr *MockAdminMockRecorder) RemovePeer(ctx, nodeURL interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePeer", reflect.TypeOf((*MockAdmin)(nil).RemovePeer), ctx, nodeURL)
}

// ImportChain mocks base method
func (m *MockAdmin) ImportChain(ctx context.Context, file string) (bool, error) {
	ret := m.ctrl.Call(m, "ImportChain", ctx, file)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportChain indicates an expected call of ImportChain
func (mr *MockAdminMockRecorder) ImportChain(ctx, file interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportChain", reflect.TypeOf((*MockAdmin)(nil).ImportChain), ctx, file)
}

// ExportChain mocks base method
func (m *MockAdmin) ExportChain(ctx context.Context, file string) (bool, error) {
	ret := m.ctrl.Call(m, "ExportChain", ctx, file)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportChain indicates an expected call of ExportChain
func (mr *MockAdminMockRecorder) ExportChain(ctx, file interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportChain", reflect.TypeOf((*MockAdmin)(nil).ExportChain), ctx, file)
}

// StartRPC mocks base method
func (m *MockAdmin) StartRPC(ctx context.Context, host string, port int, cors, apis string) (bool, error) {
	ret := m.ctrl.Call(m, "StartRPC", ctx, host, port, cors, apis)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartRPC indicates an expected call of StartRPC
func (mr *MockAdminMockRecorder) StartRPC(ctx, host, port, cors, apis interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRPC", reflect.TypeOf((*MockAdmin)(nil).StartRPC), ctx, host, port, cors, apis)
}

// StopRPC mocks base method
func (m *MockAdmin) StopRPC(ctx context.Context) (bool, error) {
	ret := m.ctrl.Call(m, "StopRPC", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopRPC indicates an expected call of StopRPC
func (mr *MockAdminMockRecorder) StopRPC(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopRPC", reflect.TypeOf((*MockAdmin)(nil).StopRPC), ctx)
}

// StartWS mocks base method
func (m *MockAdmin) StartWS(ctx context.Context, host string, port int, allowedOrigins, apis string) (bool, error) {
	ret := m.ctrl.Call(m, "StartWS", ctx, host, port, allowedOrigins, apis)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartWS indicates an expected call of StartWS
func (mr *MockAdminMockRecorder) StartWS(ctx, host, port, allowedOrigins, apis interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWS", reflect.TypeOf((*MockAdmin)(nil).StartWS), ctx, host, port, allowedOrigins, apis)
}

// StopWS mocks base method
func (m *MockAdmin) StopWS(ctx context.Context) (bool, error) {
	ret := m.ctrl.Call(m, "StopWS", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopWS indicates an expected call of StopWS
func (mr *MockAdminMockRecorder) StopWS(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWS", reflect.TypeOf((*MockAdmin)(nil).StopWS), ctx)
}

// Peers mocks base method
func (m *MockAdmin) Peers(ctx context.Context) ([]*p2p.PeerInfo, error) {
	ret := m.ctrl.Call(m, "Peers", ctx)
	ret0, _ := ret[0].([]*p2p.PeerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Peers indicates an expected call of Peers
func (mr *MockAdminMockRecorder) Peers(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peers", reflect.TypeOf((*MockAdmin)(nil).Peers), ctx)
}

// NodeInfo mocks base method
func (m *MockAdmin) NodeInfo(ctx context.Context) (*p2p.NodeInfo, error) {
	ret := m.ctrl.Call(m, "NodeInfo", ctx)
	ret0, _ := ret[0].(*p2p.NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeInfo indicates an expected call of NodeInfo
func (mr *MockAdminMockRecorder) NodeInfo(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeInfo", reflect.TypeOf((*MockAdmin)(nil).NodeInfo), ctx)
}

// Datadir mocks base method
func (m *MockAdmin) Datadir(ctx context.Context) (string, error) {
	ret := m.ctrl.Call(m, "Datadir", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Datadir indicates an expected call of Datadir
func (mr *MockAdminMockRecorder) Datadir(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Datadir", reflect.TypeOf((*MockAdmin)(nil).Datadir), ctx)
}

// MockPrivateAdmin is a mock of PrivateAdmin interface
type MockPrivateAdmin struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateAdminMockRecorder
}

// MockPrivateAdminMockRecorder is the mock recorder for MockPrivateAdmin
type MockPrivateAdminMockRecorder struct {
	mock *MockPrivateAdmin
}

// NewMockPrivateAdmin creates a new mock instance
func NewMockPrivateAdmin(ctrl *gomock.Controller) *MockPrivateAdmin {
	mock := &MockPrivateAdmin{ctrl: ctrl}
	mock.recorder = &MockPrivateAdminMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrivateAdmin) EXPECT() *MockPrivateAdminMockRecorder {
	return m.recorder
}

// AddPeer mocks base method
func (m *MockPrivateAdmin) AddPeer(ctx context.Context, nodeURL string) (bool, error) {
	ret := m.ctrl.Call(m, "AddPeer", ctx, nodeURL)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPeer indicates an expected call of AddPeer
func (mr *MockPrivateAdminMockRecorder) AddPeer(ctx, nodeURL interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeer", reflect.TypeOf((*MockPrivateAdmin)(nil).AddPeer), ctx, nodeURL)
}

// RemovePeer mocks base method
func (m *MockPrivateAdmin) RemovePeer(ctx context.Context, nodeURL string) (bool, error) {
	ret := m.ctrl.Call(m, "RemovePeer", ctx, nodeURL)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePeer indicates an expected call of RemovePeer
func (mr *MockPrivateAdminMockRecorder) RemovePeer(ctx, nodeURL interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePeer", reflect.TypeOf((*MockPrivateAdmin)(nil).RemovePeer), ctx, nodeURL)
}

// ImportChain mocks base method
func (m *MockPrivateAdmin) ImportChain(ctx context.Context, file string) (bool, error) {
	ret := m.ctrl.Call(m, "ImportChain", ctx, file)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportChain indicates an expected call of ImportChain
func (mr *MockPrivateAdminMockRecorder) ImportChain(ctx, file interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportChain", reflect.TypeOf((*MockPrivateAdmin)(nil).ImportChain), ctx, file)
}

// ExportChain mocks base method
func (m *MockPrivateAdmin) ExportChain(ctx context.Context, file string) (bool, error) {
	ret := m.ctrl.Call(m, "ExportChain", ctx, file)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportChain indicates an expected call of ExportChain
func (mr *MockPrivateAdminMockRecorder) ExportChain(ctx, file interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportChain", reflect.TypeOf((*MockPrivateAdmin)(nil).ExportChain), ctx, file)
}

// StartRPC mocks base method
func (m *MockPrivateAdmin) StartRPC(ctx context.Context, host string, port int, cors, apis string) (bool, error) {
	ret := m.ctrl.Call(m, "StartRPC", ctx, host, port, cors, apis)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartRPC indicates an expected call of StartRPC
func (mr *MockPrivateAdminMockRecorder) StartRPC(ctx, host, port, cors, apis interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRPC", reflect.TypeOf((*MockPrivateAdmin)(nil).StartRPC), ctx, host, port, cors, apis)
}

// StopRPC mocks base method
func (m *MockPrivateAdmin) StopRPC(ctx context.Context) (bool, error) {
	ret := m.ctrl.Call(m, "StopRPC", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopRPC indicates an expected call of StopRPC
func (mr *MockPrivateAdminMockRecorder) StopRPC(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopRPC", reflect.TypeOf((*MockPrivateAdmin)(nil).StopRPC), ctx)
}

// StartWS mocks base method
func (m *MockPrivateAdmin) StartWS(ctx context.Context, host string, port int, allowedOrigins, apis string) (bool, error) {
	ret := m.ctrl.Call(m, "StartWS", ctx, host, port, allowedOrigins, apis)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartWS indicates an expected call of StartWS
func (mr *MockPrivateAdminMockRecorder) StartWS(ctx, host, port, allowedOrigins, apis interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWS", reflect.TypeOf((*MockPrivateAdmin)(nil).StartWS), ctx, host, port, allowedOrigins, apis)
}

// StopWS mocks base method
func (m *MockPrivateAdmin) StopWS(ctx context.Context) (bool, error) {
	ret := m.ctrl.Call(m, "StopWS", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopWS indicates an expected call of StopWS
func (mr *MockPrivateAdminMockRecorder) StopWS(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWS", reflect.TypeOf((*MockPrivateAdmin)(nil).StopWS), ctx)
}

// MockPublicAdmin is a mock of PublicAdmin interface
type MockPublicAdmin struct {
	ctrl     *gomock.Controller
	recorder *MockPublicAdminMockRecorder
}

// MockPublicAdminMockRecorder is the mock recorder for MockPublicAdmin
type MockPublicAdminMockRecorder struct {
	mock *MockPublicAdmin
}

// NewMockPublicAdmin creates a new mock instance
func NewMockPublicAdmin(ctrl *gomock.Controller) *MockPublicAdmin {
	mock := &MockPublicAdmin{ctrl: ctrl}
	mock.recorder = &MockPublicAdminMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublicAdmin) EXPECT() *MockPublicAdminMockRecorder {
	return m.recorder
}

// Peers mocks base method
func (m *MockPublicAdmin) Peers(ctx context.Context) ([]*p2p.PeerInfo, error) {
	ret := m.ctrl.Call(m, "Peers", ctx)
	ret0, _ := ret[0].([]*p2p.PeerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Peers indicates an expected call of Peers
func (mr *MockPublicAdminMockRecorder) Peers(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peers", reflect.TypeOf((*MockPublicAdmin)(nil).Peers), ctx)
}

// NodeInfo mocks base method
func (m *MockPublicAdmin) NodeInfo(ctx context.Context) (*p2p.NodeInfo, error) {
	ret := m.ctrl.Call(m, "NodeInfo", ctx)
	ret0, _ := ret[0].(*p2p.NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeInfo indicates an expected call of NodeInfo
func (mr *MockPublicAdminMockRecorder) NodeInfo(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeInfo", reflect.TypeOf((*MockPublicAdmin)(nil).NodeInfo), ctx)
}

// Datadir mocks base method
func (m *MockPublicAdmin) Datadir(ctx context.Context) (string, error) {
	ret := m.ctrl.Call(m, "Datadir", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Datadir indicates an expected call of Datadir
func (mr *MockPublicAdminMockRecorder) Datadir(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Datadir", reflect.TypeOf((*MockPublicAdmin)(nil).Datadir), ctx)
}
